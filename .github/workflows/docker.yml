name: Create and Publish a Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Generate matrix
        id: generate-matrix
        run: |
          MATRIX=$(nix run .#matrix --quiet)
          echo "Generated Matrix:"
          echo "$MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Set IMAGE_NAME
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Login to the Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: (${{ matrix.arch }}) Extract Version and Build/Push Images
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          VERSION=$(grep '^version' Cargo.toml | cut -d'"' -f2)
          IMG_NAME="${REGISTRY}/${IMAGE_NAME}"

          echo "Building ${IMG_NAME}:${VERSION}"
          nix build '.?submodules=1#image-${{ matrix.arch }}'
          docker load <./result

          echo "Publish '${VERSION}'"
          docker tag "cangrebot:${VERSION}" "${IMG_NAME}:${VERSION}"
          docker push "${IMG_NAME}:${VERSION}"

          echo "Publish 'latest'"
          docker tag "cangrebot:${VERSION}" "${IMG_NAME}:latest"
          docker push "${IMG_NAME}:latest"

  apply-secrets:
    needs: [build-and-push-image]
    runs-on: ubuntu-latest
    steps:
      - name: Install Kubectl
        run: |
          bash <(curl -sL https://raw.githubusercontent.com/RustLangES/workflows/main/setup-kubectl.sh) -t "${{ secrets.KUBE_TOKEN }}" -c "${{ secrets.KUBE_CERTIFICATE }}" -h "${{ secrets.KUBE_HOST }}"
      - name: Update Remote Secrets
        run: |
          NAMESPACE=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          kubectl create secret generic "$NAMESPACE-secrets" \
            --namespace="$NAMESPACE" \
            --from-literal=DISCORD_TOKEN="${{ secrets.DISCORD_TOKEN }}" \
            --from-literal=GUILD_ID="${{ secrets.GUILD_ID }}" \
            --from-literal=CHANNEL_DAILY="${{ secrets.CHANNEL_DAILY }}" \
            --from-literal=CHANNEL_SUGGEST="${{ secrets.CHANNEL_SUGGEST }}" \
            --from-literal=TEMPORAL_WAIT="${{ secrets.CANGREBOT_TEMP_WAIT_CHANNEL }}" \
            --from-literal=TEMPORAL_CATEGORY="${{ secrets.CANGREBOT_TEMP_CATEGORY }}" \
            --from-literal=TEMPORAL_LOGS="${{ secrets.CANGREBOT_TEMP_LOGS_CHANNEL }}" \
            --from-literal=BOT_APIKEY="${{ secrets.CANGREBOT_APIKEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -
